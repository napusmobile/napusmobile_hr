<div class="row g-3 mt-2">
  <div class="col-md-12">
    <div class="card border-0 shadow-sm">
      <div class="card-header bg-white">
        <div class="row g-3">
          <div class="col-12 col-md-4 mb-2 mb-md-0">üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</div>
          <div class="col-12 col-md-8 d-flex flex-wrap justify-content-md-end">
            <select class="form-control float-sm-end me-2 mb-2 mb-md-0" style="width: auto;" onchange="updateItemsLeave(this.value)">
            <option value="10">‚úÖ 10</option>
            <option value="20">‚úÖ 25</option>
            <option value="50">‚úÖ 50</option>
            <option value="100">‚úÖ 100</option>
            <option value="all">‚úÖ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
          </select>
            <input type="search" class="form-control float-sm-end me-2 mb-2 mb-md-0" style="width: auto;" id="searchLeave" placeholder="üîç‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..." oninput="filterLeave()">
            <button type="button" class="btn upload-button" id="appLev-button" onclick="openLeaveApprovalModal()" style="display:none"><i class="fa-solid fa-pen-to-square"></i> ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏á‡∏≤‡∏ô <span class="badge del-button" id="countingLeave">0</span></button>
          </div>
        </div>
      </div>
      <div class="card-body rounded-4">
        <div class="table-responsive">
          <table class="table table-sm">
            <thead>
              <tr>
                <th scope="col" class="text-center">#</th>
                <th scope="col" class="text-center">‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</th>
                <th scope="col" class="text-center" style="width: 400px;">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                <th scope="col" class="text-center">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                <th scope="col" class="text-center" style="width: 350px;">‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</th>
                <th scope="col" class="text-center">‡πÑ‡∏ü‡∏•‡πå</th>
                <th scope="col" class="text-center">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th scope="col" class="text-center">Action</th>
              </tr>
            </thead>
            <tbody id="tableLeave">
              <tr>
                <td colspan='8' class='fw-bold text-danger text-center p-4'>
                  <i class='fa-solid fa-circle-info text-danger'></i> ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•! üòì</td>
              </tr>
            </tbody>
          </table>
        </div>
        <div class="row mt-1">
          <div class="col-12 col-md-6 mb-2 mb-md-0 align-items-center" id="paginationLeaveInfo"></div>
          <div class="col-12 col-md-6 d-flex justify-content-md-end align-items-center">
            <div id="paginationLeave" class="pagination"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let filteredLeave = [];
let currentLeave = 1;
let itemsPerLeave = 10;

const renderDataLeave = (res) => {
  const table = document.getElementById('tableLeave');
  table.innerHTML = '';

  const uidMember = localStorage.getItem('uiduser');
  const userLevel = localStorage.getItem('level');

  if (userLevel === 'SuperAdmin' || userLevel === 'Admin') {
    filteredLeave = res;
  } else {
    filteredLeave = res.filter(row => row[3] === uidMember);
  }

  filteredLeave.sort((a, b) => {
    if (a[1] === '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' && b[1] !== '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö') return -1;
    if (a[1] !== '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' && b[1] === '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö') return 1;

    const numA = parseInt(a[0].replace('LEV', ''));
    const numB = parseInt(b[0].replace('LEV', ''));
    return numB - numA;
  });

  const startIndex = (currentLeave - 1) * itemsPerLeave;
  const endIndex = startIndex + itemsPerLeave;
  const lev = filteredLeave.slice(startIndex, endIndex);

  const startRow = startIndex + 1;
  const endRow = startIndex + lev.length;
  const totalRows = filteredLeave.length;

  document.getElementById('paginationLeaveInfo').innerText = `‡πÅ‡∏™‡∏î‡∏á ${startRow} ‡∏ñ‡∏∂‡∏á ${endRow} ‡∏à‡∏≤‡∏Å ${totalRows} ‡πÅ‡∏ñ‡∏ß`;

  if (lev.length === 0) {
    const row = table.insertRow();
    row.innerHTML = `<td colspan='8' class='fw-bold text-danger text-center p-4'><i class='fa-solid fa-circle-info text-danger'></i> ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•! üòì</td>`;
    return;
  }

  lev.forEach((rowIndex, index) => {
    const checkrowIndex = [rowIndex[15], rowIndex[16], rowIndex[17], rowIndex[18]];
    const filledFields = checkrowIndex.filter(field => field && field.trim() !== '').length;
    const progressbar = Math.round((filledFields / checkrowIndex.length) * 100);
    const progressAngle = progressbar * 3.6;

    let progressColor;
    let buttonClass = 'upload-button';
    if (progressbar <= 25) {
      progressColor = 'var(--box4)';
      buttonClass = 'del-button';
    } else if (progressbar <= 50) {
      progressColor = 'var(--box3)';
      buttonClass = 'edit-button';
    } else if (progressbar <= 75) {
      progressColor = 'var(--box1)';
      buttonClass = 'set-button';
    } else {
      progressColor = 'var(--box2)';
      buttonClass = 'upload-button';
    }

    let leaveMenuItem;
    if (rowIndex[1] === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥') {
      leaveMenuItem = `<li><a class="dropdown-item hover-highlight" onclick="sendLeave('${rowIndex[0]}')"><i class="fa-regular fa-paper-plane"></i> ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡∏•‡∏≤</a></li>`;
    } else {
      leaveMenuItem = `<li><a class="dropdown-item hover-highlight" onclick="sendLeave('${rowIndex[0]}')"><i class="fa-regular fa-circle-xmark"></i> ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡∏•‡∏≤</a></li>`;
    }

    let statusImage;
    if (rowIndex[10].trim() !== "") {
      statusImage = `<a type="button" href="${rowIndex[10]}" target="_blank" class="btn btn-sm upload-button">‚úÖ ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á</a>`;
    } else {
      statusImage = `<a type="button" class="btn btn-sm del-button">‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå</a>`;
    }

    let imgLeaveTypes = '';
    switch (rowIndex[8]) {
      case '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏°‡∏µ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå':
        imgLeaveTypes = 'https://raw.githubusercontent.com/EPICCODING17/Icons/main/bed-leave.png';
        break;
      case '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå':
        imgLeaveTypes = 'https://raw.githubusercontent.com/EPICCODING17/Icons/main/fever-leave.png';
        break;
      case '‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô':
        imgLeaveTypes = 'https://raw.githubusercontent.com/EPICCODING17/Icons/main/leave.png';
        break;
      case '‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ':
        imgLeaveTypes = 'https://raw.githubusercontent.com/EPICCODING17/Icons/main/training-leave.png';
        break;
      case '‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô':
        imgLeaveTypes = 'https://raw.githubusercontent.com/EPICCODING17/Icons/main/beach-chair-leave.png';
        break;
      case '‡∏•‡∏≤‡∏ö‡∏ß‡∏ä':
        imgLeaveTypes = 'https://raw.githubusercontent.com/EPICCODING17/Icons/main/monk-leave.png';
        break;
      case '‡∏•‡∏≤‡∏Ñ‡∏•‡∏≠‡∏î':
        imgLeaveTypes = 'https://raw.githubusercontent.com/EPICCODING17/Icons/main/mother-leave.png';
        break;
      case '‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ó‡∏´‡∏≤‡∏£':
        imgLeaveTypes = 'https://raw.githubusercontent.com/EPICCODING17/Icons/main/soldier-leave.png';
        break;
      default:
        imgLeaveTypes = 'https://cdn.jsdelivr.net/gh/napusmobile/napusmobile@main/logo.png';
    }

    let user = dataUsers && dataUsers.find(user => user[0] === rowIndex[3]);
    let userImage = user ? user[7] : 'https://cdn.jsdelivr.net/gh/napusmobile/napusmobile@main/logo.png';

    var row = table.insertRow();
    row.innerHTML = `
    <td class="text-center"><span style="font-size: 14px;">${startIndex + index + 1}</span></td>
    <td>
      <div style="display: flex; align-items: center;">
        <img class="rounded-circle" src="${userImage ? userImage : '‚ùå N/A'}" alt="ImageUsers" width="40" style="margin-right: 10px;">
        <div style="font-size: 14px;">
          <span>‡∏ä‡∏∑‡πà‡∏≠ ‡∏™‡∏Å‡∏∏‡∏•: ${rowIndex[4] ? rowIndex[4] : '‚ùå N/A'}</span><br>
          <span>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${rowIndex[5] ? rowIndex[5] : '‚ùå N/A'}</span><br>
          <span>‡πÅ‡∏ú‡∏ô‡∏Å: ${rowIndex[6] ? rowIndex[6] : '‚ùå N/A'}</span>
        </div>
      </div>
    </td>
    <td>
      <div style="display: flex; align-items: center;">
        <img class="rounded-circle" src="${imgLeaveTypes ? imgLeaveTypes : '‚ùå N/A'}" alt="ImageUsers" width="40" style="margin-right: 10px;">
        <div style="font-size: 14px;">
          <span>‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏á‡∏≤‡∏ô: ${rowIndex[8] ? rowIndex[8] : '‚ùå N/A'}</span><br>
          <span>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${rowIndex[9] ? rowIndex[9] : '‚ùå N/A'}</span>
        </div>
      </div>
    </td>
    <td>
      <span style="font-size: 14px;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${rowIndex[11] ? rowIndex[11] : '‚ùå N/A'}</span><br>
      <span style="font-size: 14px;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: ${rowIndex[12] ? rowIndex[12] : '‚ùå N/A'}</span>
    </td>
    <td>
      <span style="font-size: 14px;">‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: ${rowIndex[15] ? rowIndex[15] : '‚ùå N/A'}</span><br>
      <span style="font-size: 14px;">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô: ${rowIndex[16] ? rowIndex[16] : '‚ùå N/A'} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${rowIndex[17] ? rowIndex[17] : '‚ùå N/A'}</span>
    </td>
    <td class="text-center" style="vertical-align: middle;">
      <div style="display: flex; align-items: center; justify-content: center;">
        <span style="font-size: 14px;">${statusImage}</span>
      </div>
    </td>
    <td class="text-center" style="vertical-align: middle;">
      <div style="display: flex; align-items: center; justify-content: center;">
        <div class="circular-progress" style="--progress-color: ${progressColor}; --progress-angle: ${progressAngle}deg;">
          <span class="progress-value">${progressbar}%</span>
        </div>
      </div>
    </td>
    <td class="text-center" style="vertical-align: middle;">
      <div style="display: flex; align-items: center; justify-content: center;">
        <select class="form-control me-2" style="font-size: 14px; width: auto;" disabled>
          <option value="‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" ${rowIndex[1] === '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' ? 'selected' : ''}>‚åõ ‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</option>
          <option value="‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" ${rowIndex[1] === '‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' ? 'selected' : ''}>‚ùå ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</option>
          <option value="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ${rowIndex[1] === '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ? 'selected' : ''}>‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
          <option value="‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" ${rowIndex[1] === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' ? 'selected' : ''}>‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</option>
        </select>
        <div class="dropdown">
          <button class="btn btn-sm del-button dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="fa-solid fa-ellipsis"></i>
          </button>
          <ul class="dropdown-menu">
            <li><a class="dropdown-item hover-highlight" onclick="editLeave('${rowIndex[0]}')"><i class="fa-solid fa-pen-to-square"></i> ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</a></li>
            <li><a class="dropdown-item hover-highlight" onclick="delLeave('${rowIndex[0]}')"><i class="fa-solid fa-trash-can"></i> ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</a></li>
            ${leaveMenuItem}
          </ul>
        </div>
      </div>
    </td>
    `;
  });
}

const renderPageDataLeave = () => {
  const totalItems = filteredLeave.length;
  const totalPages = Math.ceil(totalItems / itemsPerLeave);
  const paginationContainer = document.getElementById('paginationLeave');
  paginationContainer.innerHTML = '';

  if (totalPages > 1) {
    const createPageButton = (text, page, isDisabled = false, isActive = false) => {
      const li = document.createElement('li');
      li.className = `page-item ${isDisabled ? 'disabled' : ''} ${isActive ? 'active' : ''}`;
      const button = document.createElement('button');
      button.className = 'page-link';
      button.innerText = text;
      button.onclick = () => {
        if (!isDisabled) {
          currentLeave = page;
          renderDataLeave(filteredLeave);
          renderPageDataLeave();
        }
      };
      li.appendChild(button);
      return li;
    };

    paginationContainer.appendChild(createPageButton('‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö', currentLeave - 1, currentLeave === 1));

    if (currentLeave > 2) {
      paginationContainer.appendChild(createPageButton(1, 1, false, currentLeave === 1));
      if (currentLeave > 3) {
        const ellipsis = document.createElement('li');
        ellipsis.className = 'page-item disabled';
        ellipsis.innerHTML = '<span class="page-link">...</span>';
        paginationContainer.appendChild(ellipsis);
      }
    }

    paginationContainer.appendChild(createPageButton(currentLeave, currentLeave, false, true));

    if (currentLeave < totalPages - 1) {
      if (currentLeave < totalPages - 2) {
        const ellipsis = document.createElement('li');
        ellipsis.className = 'page-item disabled';
        ellipsis.innerHTML = '<span class="page-link">...</span>';
        paginationContainer.appendChild(ellipsis);
      }
      paginationContainer.appendChild(createPageButton(totalPages, totalPages, false, currentLeave === totalPages));
    }
    paginationContainer.appendChild(createPageButton('‡∏ñ‡∏±‡∏î‡πÑ‡∏õ', currentLeave + 1, currentLeave === totalPages));
  }
}

const filterLeave = () => {
  const query = document.getElementById('searchLeave').value.toLowerCase();
  const uidMember = localStorage.getItem('uiduser');
  const userLevel = localStorage.getItem('level');

  if (userLevel === 'SuperAdmin' || userLevel === 'Admin') {
    filteredLeave = allleave.filter(row => row.some(column => column.toLowerCase().includes(query)));
  } else {
    filteredLeave = allleave.filter(row => row[3] === uidMember && row.some(column => column.toLowerCase().includes(query)));
  }

  currentLeave = 1;
  renderDataLeave(filteredLeave);
  renderPageDataLeave();
}

const updateItemsLeave = (value) => {
  if (value === "all") {
    itemsPerLeave = filteredLeave.length;
  } else {
    itemsPerLeave = parseInt(value, 10);
  }

  currentLeave = 1;
  renderDataLeave(filteredLeave);
  renderPageDataLeave();
}

const updateCountsLeave = (data) => {
  const countingLeave = data.filter(row => row[1] === "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö").length;
  document.getElementById('countingLeave').innerText = countingLeave;
}

const handleLeaveStartDateChange = () => {
  const leaveEndDate = document.getElementById('leaveData4');
  leaveEndDate.value = '';
  calculateLeave();
};

const handleLeaveEndDateChange = () => {
  const fullDaySwitch = document.getElementById('fullDaySwitch');
  if (fullDaySwitch && fullDaySwitch.checked) {
    calculateLeave();
  }
};

const setMinDateLeave = () => {
  const today = new Date().toISOString().split('T')[0];
  document.getElementById('leaveData3').setAttribute('min', today);
  document.getElementById('leaveData4').setAttribute('min', today);
};

const toggleFullDayLeave = () => { 
  const fullDaySwitch = document.getElementById('fullDaySwitch');
  const morningSwitch = document.getElementById('morningHalfDaySwitch');
  const afternoonSwitch = document.getElementById('afternoonHalfDaySwitch');
  const levStartDate = document.getElementById('leaveData3').value;

  if (fullDaySwitch.checked) {
    morningSwitch.checked = false;
    afternoonSwitch.checked = false;
    if (!levStartDate) {
      createToast("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", 3);
      fullDaySwitch.checked = false;
      return;
    }
    const startDate = new Date(levStartDate);

    document.getElementById('leaveData3').value = startDate.toISOString().split('T')[0] + "T00:00";

    const endDate = new Date(startDate);
    endDate.setDate(endDate.getDate() + 1);
    document.getElementById('leaveData4').value = endDate.toISOString().split('T')[0] + "T00:00";
  } else {
    document.getElementById('leaveData4').value = '';
  }
  calculateLeave();
};

const toggleMorningHalfDayLeave = () => {
  const morningSwitch = document.getElementById('morningHalfDaySwitch');
  const afternoonSwitch = document.getElementById('afternoonHalfDaySwitch');
  const fullDaySwitch = document.getElementById('fullDaySwitch');
  const levStartDate = document.getElementById('leaveData3').value;

  if (morningSwitch.checked) {
    afternoonSwitch.checked = false;
    fullDaySwitch.checked = false;
    if (!levStartDate) {
      createToast("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", 3);
      morningSwitch.checked = false;
      return;
    }
    document.getElementById('leaveData3').value = levStartDate.split('T')[0] + "T00:00"; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡πÑ‡∏ß‡πâ
    document.getElementById('leaveData4').value = levStartDate.split('T')[0] + "T12:00";
  } else {
    document.getElementById('leaveData4').value = '';
  }
  calculateLeave();
};

const toggleAfternoonHalfDayLeave = () => {
  const afternoonSwitch = document.getElementById('afternoonHalfDaySwitch');
  const morningSwitch = document.getElementById('morningHalfDaySwitch');
  const fullDaySwitch = document.getElementById('fullDaySwitch');
  const levStartDate = document.getElementById('leaveData3').value;

  if (afternoonSwitch.checked) {
    morningSwitch.checked = false;
    fullDaySwitch.checked = false;
    if (!levStartDate) {
      createToast("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", 3);
      afternoonSwitch.checked = false;
      return;
    }
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡πà‡∏≤‡∏¢ (12:00) ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ö‡πà‡∏≤‡∏¢ (23:59)
    document.getElementById('leaveData3').value = levStartDate.split('T')[0] + "T12:00";
    document.getElementById('leaveData4').value = levStartDate.split('T')[0] + "T23:59";
  } else {
    document.getElementById('leaveData4').value = '';
  }
  calculateLeave();
};

const calculateLeave = () => {
  const fullDaySwitch = document.getElementById('fullDaySwitch');
  const startDate = document.getElementById('leaveData3').value;
  const endDate = document.getElementById('leaveData4').value;

  if (startDate && endDate) {
    const start = new Date(startDate);
    const end = new Date(endDate);

    const diffMs = end - start; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const diffHours = diffMs / (1000 * 60 * 60); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á

    let diffDays = 0;
    let hours = 0;

    if (fullDaySwitch.checked && diffHours >= 24) {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏ï‡πá‡∏°‡∏ß‡∏±‡∏ô
      diffDays = Math.ceil(diffHours / 24); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô
    } else if (!fullDaySwitch.checked && diffHours <= 12 && diffHours > 0) {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô (12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
      hours = 12;
    }

    document.getElementById('leaveData5').value = diffDays; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô
    document.getElementById('leaveData6').value = hours;   // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  } else {
    document.getElementById('leaveData5').value = 0;
    document.getElementById('leaveData6').value = 0;
  }
};

const submitFormLeave = () => {
  event.preventDefault();
  $.LoadingOverlay("show", { image : "", fontawesome : "fa fa-spinner fa-spin" }); 

  const obj = {
    leaveKey: document.getElementById('leaveDataKey').value,
    leaveA: document.getElementById('user-show0').innerText,
    leaveB: document.getElementById('user-show1').innerText,
    leaveC: document.getElementById('user-show2').innerText,
    leaveD: document.getElementById('user-show5').innerText,
    leaveE: document.getElementById('user-show4').innerText,
    leaveData1: document.getElementById('leaveData1').value,
    leaveData2: document.getElementById('leaveData2').value,
    leaveData3: document.getElementById('leaveData3').value,
    leaveData4: document.getElementById('leaveData4').value,
    leaveData5: document.getElementById('leaveData5').value,
    leaveData6: document.getElementById('leaveData6').value,
  };

if (!obj.leaveA || !obj.leaveB || !obj.leaveC || !obj.leaveD || !obj.leaveE || !obj.leaveData1 || !obj.leaveData2 || !obj.leaveData3 || !obj.leaveData4 || !obj.leaveData5 || !obj.leaveData6) {
   createToast("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", 3);
  $.LoadingOverlay("hide");
   return;
  }

  const fileInput = document.getElementById('leaveData7');
  if (fileInput.files.length > 0) {
    const file = fileInput.files[0];
    const reader = new FileReader();
    reader.onloadend = function() {
      obj.filetype = file.type;
      obj.imageDataUrl = reader.result;
      
      if (!obj.leaveKey) {
        google.script.run.withSuccessHandler(async (res) => {
          $.LoadingOverlay("hide");
          await updateSpecificLeaveData();
          loadLeaveTypes();
          updateCalendarLev();
          insertChartLev();
          clearFormLeave();
          renderCalendarLev();
          createToast("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 1);
        }).addDataLeave(obj);
      } else {
        google.script.run.withSuccessHandler(async (res) => {
          $.LoadingOverlay("hide");
          await updateSpecificLeaveData();
          loadLeaveTypes();
          updateCalendarLev();
          insertChartLev();
          clearFormLeave();
          renderCalendarLev();
          createToast("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 1);
        }).upDataLeave(obj);
      }
    };
    reader.readAsDataURL(file);
  } else {
    if (!obj.leaveKey) {
      google.script.run.withSuccessHandler(async (res) => {
        $.LoadingOverlay("hide");
          await updateSpecificLeaveData();
          loadLeaveTypes();
          updateCalendarLev();
          insertChartLev();
        clearFormLeave();
        createToast("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 1);
      }).addDataLeave(obj);
    } else {
      google.script.run.withSuccessHandler(async (res) => {
        $.LoadingOverlay("hide");
          await updateSpecificLeaveData();
          loadLeaveTypes();
          updateCalendarLev();
          insertChartLev();
        clearFormLeave();
        createToast("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 1);
      }).upDataLeave(obj);
    }
  }
};

const editLeave = (codeID) => {
  const userRole1 = localStorage.getItem('uiduser') || '';
  const userRole2 = localStorage.getItem('level') || '';
  const dataAllLev = allleave.find(row => row[0] === codeID);
  
  if (dataAllLev) {
    if ((userRole2 !== 'SuperAdmin' && userRole2 !== 'Admin' && userRole1 !== dataAllLev[3])) {
      createToast("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ", 3);
      return;
    }
    if (dataAllLev[1] !== '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö') {
      createToast("‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ", 3);
      return;
    }
    if (dataAllLev[8] === '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏°‡∏µ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå') {
      document.getElementById('leaveData7Row').style.display = 'block';
      document.getElementById('leaveData7').style.display = 'block';
    } else {
      document.getElementById('leaveData7Row').style.display = 'none';
      document.getElementById('leaveData7').style.display = 'none';
    }

    $('#RPTLModal').modal('show');
    $('#leaveDataKey').val(dataAllLev[0]);
    $('#leaveData1').val(dataAllLev[8]);
    $('#leaveData2').val(dataAllLev[9]);
    $('#leaveData3').val(dataAllLev[11]);
    $('#leaveData4').val(dataAllLev[12]);
    const startDateTime = new Date(dataAllLev[11]);
    const endDateTime = new Date(dataAllLev[12]);
    const diffTime = endDateTime - startDateTime;
    const diffHours = diffTime / (1000 * 60 * 60);
    const isMorning = (startDateTime.getHours() === 0 && diffHours === 12);
    const isAfternoon = (startDateTime.getHours() === 12 && diffHours === 12);
    const isFullDay = (startDateTime.getHours() === 0 && diffHours >= 24);

    document.getElementById('morningHalfDaySwitch').checked = isMorning;
    document.getElementById('afternoonHalfDaySwitch').checked = isAfternoon;
    document.getElementById('fullDaySwitch').checked = isFullDay;

    $('#leaveData5').val(dataAllLev[13]);
    $('#leaveData6').val(dataAllLev[14]);

    calculateLeave();
  }
};

const delLeave = (codeID) => {
  const userRole1 = localStorage.getItem('uiduser') || '';
  const userRole2 = localStorage.getItem('level') || '';
  let dataAllLev = allleave.find(row => row[0] === codeID);
  if (dataAllLev) {
    if ((userRole2 !== 'SuperAdmin' && userRole2 !== 'Admin' && userRole1 !== dataAllLev[3])) {
      createToast("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ", 3);
      return;
    }
    if (dataAllLev[1] !== '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö') {
      createToast("‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ", 3);
      return;
    }
    $('#confirmBtnDel').off('click').on('click', function() {
      $.LoadingOverlay("show", { image: "", fontawesome: "fa fa-spinner fa-spin" });
      $('#DelDataModal').modal('hide');
      google.script.run.withSuccessHandler(async (res) => {
        dataAllLev = allleave.filter(row => row[0] !== codeID);
        $.LoadingOverlay("hide");
        await updateSpecificLeaveData();
        loadLeaveTypes();
        updateCalendarLev();
        insertChartLev();
        clearFormLeave();
        createToast("‚õî ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 0);
      }).delDataLeave(codeID);
    });
    $('#xDelconfirmData').off('click').on('click', function() {
      $('#DelDataModal').modal('hide');
    });
    $('#DelDataModal').modal('show');
  }
}

const clearFormLeave = () => {
  document.getElementById('leaveDataKey').value = '';
  document.getElementById('leaveData1').value = '';
  document.getElementById('leaveData2').value = '';
  document.getElementById('leaveData3').value = '';
  document.getElementById('leaveData4').value = '';
  document.getElementById('leaveData5').value = '';
  document.getElementById('leaveData6').value = '';
  document.getElementById('leaveData7').value = '';
  document.getElementById('leaveData7Row').style.display = 'none';
  document.getElementById('leaveData7').style.display = 'none';
  document.getElementById('morningHalfDaySwitch').checked = false;
  document.getElementById('afternoonHalfDaySwitch').checked = false;
  document.getElementById('fullDaySwitch').checked = false;
  

  $('#RPTLModal').modal('hide');
  $('#levSelectModal').modal('hide');
};

const submitApprovalLeave = (status) => {
  const leavedata = document.getElementById('approveDataLeave').value;
  const fullname = document.getElementById('user-show1').innerText;
  const signame = document.getElementById('user-show4').innerText;
  if (!leavedata || !fullname || !signame) {
    createToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", 0);
    return;
  }
  const data = {
    codeID: selectedAllleave[0],
    leavedata: leavedata,
    fullname: fullname,
    signame: signame,
    status: status
  };
  $.LoadingOverlay("show", { image: "", fontawesome: "fa fa-spinner fa-spin" });
  google.script.run.withSuccessHandler(async (res) => {
  $.LoadingOverlay("hide");
    $('#leaveApprovalRequestModal').modal('hide');
    document.getElementById('approveDataLeave').value = '';
    await updateSpecificLeaveData();
    loadLeaveTypes();
    updateCalendarLev();
    insertChartLev();
    createToast("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 1);
  }).approvalLeave(data);
}

const sendLeave = (codeID) => {
  const data = allleave.find(row => row[0] === codeID);
  if (!data) {
    createToast("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 0);
    return;
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤
  const calculateUserLeaveHistory = (data) => {
    const userLeaves = allleave.filter(leave => 
      leave[3] === data[3] && 
      leave[1] === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' && 
      leave[0] !== data[0]
    );

    const currentLeave = {
      type: data[8],
      days: parseFloat(data[13]) || 0,
      hours: parseFloat(data[14]) || 0
    };

    let leaveHistory = {
      sick: { count: 0, days: 0 },
      personal: { count: 0, days: 0 },
      vacation: { count: 0, days: 0 },
      other: { count: 0, days: 0 }
    };

    userLeaves.forEach(leave => {
      const days = parseFloat(leave[13]) || 0;
      const hours = parseFloat(leave[14]) || 0;
      const totalDays = days + (hours / 24);

      switch (leave[8]) {
        case '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏°‡∏µ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå':
        case '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå':
          leaveHistory.sick.count++;
          leaveHistory.sick.days += totalDays;
          break;
        case '‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô':
        case '‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ':
          leaveHistory.personal.count++;
          leaveHistory.personal.days += totalDays;
          break;
        case '‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô':
          leaveHistory.vacation.count++;
          leaveHistory.vacation.days += totalDays;
          break;
        default:
          leaveHistory.other.count++;
          leaveHistory.other.days += totalDays;
      }
    });

    const currentDays = currentLeave.days + (currentLeave.hours / 24);

    return [
      ['‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢', 
        `${leaveHistory.sick.days.toFixed(1)} ‡∏ß‡∏±‡∏ô (${leaveHistory.sick.count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)`,
        (currentLeave.type.includes('‡∏õ‡πà‡∏ß‡∏¢') ? currentDays.toFixed(1) : '0'),
        (currentLeave.type.includes('‡∏õ‡πà‡∏ß‡∏¢') ? (leaveHistory.sick.days + currentDays).toFixed(1) : leaveHistory.sick.days.toFixed(1))
      ],
      ['‡∏•‡∏≤‡∏Å‡∏¥‡∏à', 
        `${leaveHistory.personal.days.toFixed(1)} ‡∏ß‡∏±‡∏ô (${leaveHistory.personal.count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)`,
        (currentLeave.type.includes('‡∏Å‡∏¥‡∏à') ? currentDays.toFixed(1) : '0'),
        (currentLeave.type.includes('‡∏Å‡∏¥‡∏à') ? (leaveHistory.personal.days + currentDays).toFixed(1) : leaveHistory.personal.days.toFixed(1))
      ],
      ['‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô', 
        `${leaveHistory.vacation.days.toFixed(1)} ‡∏ß‡∏±‡∏ô (${leaveHistory.vacation.count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)`,
        (currentLeave.type.includes('‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô') ? currentDays.toFixed(1) : '0'),
        (currentLeave.type.includes('‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô') ? (leaveHistory.vacation.days + currentDays).toFixed(1) : leaveHistory.vacation.days.toFixed(1))
      ],
      ['‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ', 
        `${leaveHistory.other.days.toFixed(1)} ‡∏ß‡∏±‡∏ô (${leaveHistory.other.count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)`,
        (!currentLeave.type.includes('‡∏õ‡πà‡∏ß‡∏¢') && !currentLeave.type.includes('‡∏Å‡∏¥‡∏à') && !currentLeave.type.includes('‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô') ? currentDays.toFixed(1) : '0'),
        (!currentLeave.type.includes('‡∏õ‡πà‡∏ß‡∏¢') && !currentLeave.type.includes('‡∏Å‡∏¥‡∏à') && !currentLeave.type.includes('‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô') ? (leaveHistory.other.days + currentDays).toFixed(1) : leaveHistory.other.days.toFixed(1))
      ]
    ];
  };

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
  const thaiMonths = [
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  ];

  const formatThaiDate1 = (dateStr) => {
    const date = new Date(dateStr);
    return {
      date: date.getDate(),
      month: thaiMonths[date.getMonth()],
      year: date.getFullYear() + 543
    };
  };

  const formatThaiDate2 = (dateStr) => {
    const [day, month, year] = dateStr.split('/').map(num => parseInt(num, 10));
    const thaiMonths = [
      '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
      '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
    ];
    return {
      date: day,
      month: thaiMonths[month - 1],
      year: year + 543
    };
  };

  const writingDate = formatThaiDate2(data[2]);
  const approverDate = formatThaiDate2(data[17]);
  const startDate = formatThaiDate1(data[11]);
  const endDate = formatThaiDate1(data[12]);
  
  let leaveTypeCheckboxes = {
    sick: { text: '¬£', font: 'Wingdings2' },
    personal: { text: '¬£', font: 'Wingdings2' },
    vacation: { text: '¬£', font: 'Wingdings2' },
    other: { text: '¬£', font: 'Wingdings2' }
  };

  switch (data[8]) {
    case '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏°‡∏µ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå':
    case '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå':
      leaveTypeCheckboxes.sick.text = 'R';
      break;
    case '‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô':
    case '‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ':
      leaveTypeCheckboxes.personal.text = 'R';
      break;
    case '‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô':
      leaveTypeCheckboxes.vacation.text = 'R';
      break;
    default:
      leaveTypeCheckboxes.other.text = 'R';
  }

  Promise.all([
    new Promise((resolve) => loadImagepdfmake(data[7], resolve)),
    new Promise((resolve) => data[18] ? loadImagepdfmake(data[18], resolve) : resolve(null))
  ]).then(([signatureUser, signatureApprover]) => {
    const docDefinition = {
      pageSize: 'A4',
      pageMargins: [30, 20, 30, 20],
      content: [
        {
          text: '‡πÉ‡∏ö‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢ ‡∏•‡∏≤‡∏Ñ‡∏•‡∏≠‡∏î‡∏ö‡∏∏‡∏ï‡∏£ ‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß',
          style: 'header',
          alignment: 'center'
        },
        {
          columns: [
            { width: '*', text: '' },
            {
              width: 'auto',
              text: [
                { text: '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà' },
                { text: ' ' + data[6] }
              ]
            }
          ],
          margin: [0, 15, 0, 0]
        },
        {
          columns: [
            { width: '*', text: '' },
            {
              width: 'auto',
              text: [
                { text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô ' + writingDate.date + ' ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ' + writingDate.month + ' ‡∏û.‡∏®. ' + writingDate.year }
              ]
            }
          ],
          margin: [0, 5, 0, 0]
        },
        {
          text: '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á  ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï' + data[8] + '\n' +
                '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô  ‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£' + data[6],
          margin: [0, 15, 0, 0]
        },
        {
          text: [
            { text: '‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤ ' + data[4] + ' ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ' + data[5] + ' ‡∏ù‡πà‡∏≤‡∏¢ ' + data[6] 
            ,leadingIndent: 40
            },
            {
              text: [
                { text: ' ‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏•‡∏≤ ' },
                leaveTypeCheckboxes.sick,
                { text: ' ‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢ ' },
                leaveTypeCheckboxes.personal,
                { text: ' ‡∏•‡∏≤‡∏Å‡∏¥‡∏à ' },
                leaveTypeCheckboxes.vacation,
                { text: ' ‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô ' },
                leaveTypeCheckboxes.other,
                { text: ' ‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ' }
              ],
              fontSize: 14
            },
            { text: '‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å ' },
            { text: data[9] },
            { text: ' ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ' },
            { text: startDate.date + ' ' },
            { text: '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ' },
            { text: startDate.month + ' ' },
            { text: '‡∏û.‡∏®. ' },
            { text: startDate.year + ' ' },
            { text: '‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ' },
            { text: endDate.date + ' ' },
            { text: '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ' },
            { text: endDate.month + ' ' },
            { text: '‡∏û.‡∏®. ' },
            { text: endDate.year + ' ' },
            { text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ' },
            { text: data[13] + ' ' },
            { text: '‡∏ß‡∏±‡∏ô ' },
            { text: data[14] + ' ' },
            { text: '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á' }
          ],
          alignment: 'justify',
          margin: [0, 15, 0, 0]
        },
        {
          columns: [
            {
              width: '50%',
              stack: [
                {
                  text: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÉ‡∏ô‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ô‡∏µ‡πâ',
                  margin: [0, 15, 0, 5]
                },
                {
                  table: {
                    widths: ['*', '*', '*', '*'],
                    body: [
                      ['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏•‡∏≤', '‡∏•‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß', '‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ', '‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô'],
                      ...calculateUserLeaveHistory(data)
                    ]
                  },
                  style: 'tableStyle'
                }
              ]
            },
            {
              width: '50%',
              stack: [
                signatureUser ? {
                  image: signatureUser,
                  width: 60,
                  alignment: 'center',
                  margin: [30, 0, 0, 0]
                } : {},
                {
                  text: '‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠................................................‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï',
                  margin: [30, signatureUser ? 0 : 0, 0, 0]
                },
                { text: '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ' + data[5], margin: [30, 5, 0, 0] },
                { text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ' + writingDate.date + ' ' + writingDate.month + ' ' + writingDate.year, margin: [30, 5, 0, 0] },
                signatureApprover ? {
                  image: signatureApprover,
                  width: 60,
                  alignment: 'center',
                  margin: [30, 10, 0, 0]
                } : {},
                {
                  text: '‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠................................................‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤',
                  margin: [30, signatureApprover ? 0 : 0, 0, 0]
                },
                { text: '‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ ' + data[6], margin: [30, 5, 0, 0] },
                { text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ' + approverDate.date + ' ' + approverDate.month + ' ' + approverDate.year, margin: [30, 5, 0, 0] },
                { text: '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á' + data[16] ? data[16] : '', bold: true, margin: [30, 15, 0, 0] },
                {
                  text: [
                    { text: data[1] === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' ? 'R' : '¬£', font: 'Wingdings2' },
                    { text: ' ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï    ', font: 'THSarabunNew' },
                    { text: data[1] === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' ? '¬£' : 'R', font: 'Wingdings2' },
                    { text: ' ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï', font: 'THSarabunNew' }
                  ],
                  margin: [30, 5, 0, 0]
                }
              ]
            }
          ]
        }
      ],
      defaultStyle: {
        font: 'THSarabunNew',
        fontSize: 16
      },
      styles: {
        header: {
          fontSize: 18,
          bold: true,
          margin: [0, 0, 0, 20]
        },
        tableStyle: {
          fontSize: 14,
          alignment: 'center'
        }
      }
    };

    pdfMake.createPdf(docDefinition).open();
  }).catch(error => {
    console.error('Error:', error);
    createToast("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£", 0);
  });
};
</script>
